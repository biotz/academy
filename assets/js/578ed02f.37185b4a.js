"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3590],{131:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var n=o(4848),i=o(8453);const s={},c=void 0,r={id:"How-to guides/How to debug communications coming from a device into the platform.",title:"How to debug communications coming from a device into the platform.",description:"Introduction",source:"@site/docs/How-to guides/How to debug communications coming from a device into the platform..md",sourceDirName:"How-to guides",slug:"/How-to guides/How to debug communications coming from a device into the platform.",permalink:"/academy/docs/How-to guides/How to debug communications coming from a device into the platform.",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to create developer API credentials",permalink:"/academy/docs/How-to guides/How to create developer API credentials"},next:{title:"How to define alarm and triggers",permalink:"/academy/docs/How-to guides/How to define alarm and triggers"}},a={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Communication debugger",id:"communication-debugger",level:2}];function l(e){const t={h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,n.jsx)(t.p,{children:"The communication debugger has as objective to help debug possible errors or problems related to the communication coming from the devices into Biotz Platform."}),"\n",(0,n.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,n.jsx)(t.p,{children:"There must be these things defined at Biotz: device-type, message-type and schema. And at least a device registered for the defined device-type."}),"\n",(0,n.jsx)(t.p,{children:"Also the device firmware must be ready to connect to Biotz and send data."}),"\n",(0,n.jsx)(t.h2,{id:"communication-debugger",children:"Communication debugger"}),"\n",(0,n.jsx)(t.p,{children:"The communication debugger will monitorize the communications that are sent to Biotz application coming from a certain device and for a certain message-type. This provides a way to check if the messages supposedly"}),"\n",(0,n.jsx)(t.p,{children:"The tools is available under 'Developer Tools' menu item. Once selected, two inputs are shown:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Select device: in here the device from which the communication has to be debugged must be selected."}),"\n",(0,n.jsx)(t.li,{children:"Select message type: The selected device, will be of a certain device type and could have more than one message type registered for it. Each message type can be debugged on its own."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Once those are selected communication debugger can be started by using the 'Start session' button. This will show a 'terminal' style view where all communications from the device published in the selected message-type topic. The communications shown are all of them, as these aren't filtered by schema matching."}),"\n",(0,n.jsx)(t.p,{children:"At the bottom right three buttons are shown:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Stop: to pause the 'terminal' style view of showing more communications. That can be latter re-started."}),"\n",(0,n.jsx)(t.li,{children:"Download: to download all the communication in a json format into the local machine."}),"\n",(0,n.jsx)(t.li,{children:"Cancel: to shut down the communication debugger."}),"\n"]})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>r});var n=o(6540);const i={},s=n.createContext(i);function c(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);