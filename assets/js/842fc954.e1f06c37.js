"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[712],{6155:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var a=i(4848),n=i(8453);const s={sidebar_position:3,sidebar_label:"How to create a schema - setup apllication to ingest certain data"},o="How to create a schema",r={id:"How-to guides/How to create a schema",title:"How to create a schema",description:"Introduction",source:"@site/docs/How-to guides/How to create a schema.md",sourceDirName:"How-to guides",slug:"/How-to guides/How to create a schema",permalink:"/academy/docs/How-to guides/How to create a schema",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"How to create a schema - setup apllication to ingest certain data"},sidebar:"tutorialSidebar",previous:{title:"How to register devices",permalink:"/academy/docs/How-to guides/How to register devices"},next:{title:"How to publish device data using MQTT - setup devices to send data",permalink:"/academy/docs/How-to guides/How to publish device data"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a schema",id:"creating-a-schema",level:2},{value:"Create a schema using the text editor",id:"create-a-schema-using-the-text-editor",level:2}];function h(e){const t={h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"how-to-create-a-schema",children:"How to create a schema"}),"\n",(0,a.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(t.p,{children:"When data arrives into Biotz's ingestion system, the received package of data is checked against schemas defined in Biotz. These schemas are the definition of the content of the data package and the user must take care of defining them in the system."}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(t.p,{children:"In order to create a schema having a deceive-type with at least one message type is required. A schema is directly related to device-type, there can be zero to many schemas."}),"\n",(0,a.jsx)(t.h2,{id:"creating-a-schema",children:"Creating a schema"}),"\n",(0,a.jsx)(t.p,{children:"Schemas are created from the Setup > Data ingestion flow > Device-type > Message-type \u201cNew schema\u201d"}),"\n",(0,a.jsx)("div",{class:"tutorial-image-container",children:(0,a.jsx)(t.p,{children:"![Creating a schema](/academy/docs/How-to guides/img/creating-schema.png)"})}),"\n",(0,a.jsx)(t.p,{children:"When clicking on \u201cNew schema\u201d an empty schema is created."}),"\n",(0,a.jsx)("div",{class:"tutorial-image-container",children:(0,a.jsx)(t.p,{children:"![New schema](/academy/docs/How-to guides/img/new-schema.png)"})}),"\n",(0,a.jsx)(t.p,{children:"First thing will be giving a name to the schema, the purpose of this is just to identify it, it is not further used in the communication or data sending."}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.p,{children:"After naming the schema the proper and important specification happens under the \u2018Schema definition\u2019 section. It is time to let Biotz know how the sending data is structured. Once \u2018Add new item\u2019 is selected, a set of different item types are offered to cover almost all the data sending options:"}),"\n",(0,a.jsx)("div",{class:"tutorial-image-container",children:(0,a.jsx)(t.p,{children:"![Item types](/academy/docs/How-to guides/img/item-types.png)"})}),"\n",(0,a.jsxs)(t.p,{children:["Detailed specification of the item types is shared in ",(0,a.jsx)("a",{href:"/academy/docs/Reference guides/Message-type Schema specification",target:"_self",children:"here"}),".\n\u200d"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Collection of identical items: collection of more than one identical item. Being an item anything from an object/map/dictionary to singular element as a text, boolean, integer or decimal."}),"\n",(0,a.jsx)(t.li,{children:"Collection of unrelated items: collection of any kind of item, present just once."}),"\n",(0,a.jsx)(t.li,{children:"Object / Map / Dictionary: They are containers of the final properties, as the collection type items. 1 to n items can be added to this one, they are grouped in two types based on the data needed to define them:"}),"\n",(0,a.jsx)(t.li,{children:"Unix timestamp (integer)"}),"\n",(0,a.jsx)(t.li,{children:"Unix timestamp (text)"}),"\n",(0,a.jsx)(t.li,{children:"Unix timestamp RFC-3339"}),"\n",(0,a.jsx)(t.li,{children:"Text"}),"\n",(0,a.jsx)(t.li,{children:"Boolean"}),"\n",(0,a.jsx)(t.li,{children:"Integer"}),"\n",(0,a.jsx)(t.li,{children:"Integer, as text"}),"\n",(0,a.jsx)(t.li,{children:"Integer, as hexadecimal text"}),"\n",(0,a.jsx)(t.li,{children:"Decimal"}),"\n",(0,a.jsx)(t.li,{children:"Decimal, as text"}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"These are the descriptions of each of the parameters of an item:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Item type: the type of the element in the payload."}),"\n",(0,a.jsx)(t.li,{children:"Key name: key name in the object/dictionary."}),"\n",(0,a.jsx)(t.li,{children:"Item name: the name of the column where this data will be stored."}),"\n",(0,a.jsx)(t.li,{children:"Mandatory?"}),"\n",(0,a.jsx)(t.li,{children:"Can be null?"}),"\n"]}),"\n",(0,a.jsx)("div",{class:"tutorial-image-container",children:(0,a.jsx)(t.p,{children:"![parameters](/academy/docs/How-to guides/img/parameters.png)"})}),"\n",(0,a.jsx)(t.p,{children:"Timestamp ones, the same as the rest with an extra one:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Payload timestamp?: to be marked if this is the timestamp Biotz should use for the time series date mark."}),"\n"]}),"\n",(0,a.jsx)("div",{class:"tutorial-image-container",children:(0,a.jsx)(t.p,{children:"![Payload Timestamp](/academy/docs/How-to guides/img/payload-timestamp.png)"})}),"\n",(0,a.jsx)(t.p,{children:"Once the schema is totally represented the \u2018save\u2019 button will register the schema. This will create the necessary machinery for the data validation and ingestion, it will also create the needed database structure for the data to be stored."}),"\n",(0,a.jsx)(t.h2,{id:"create-a-schema-using-the-text-editor",children:"Create a schema using the text editor"}),"\n",(0,a.jsx)(t.p,{children:"Apart from the interactive user interface to register a schema, there is a editor mode to perform the same task."}),"\n",(0,a.jsx)(t.p,{children:"The editor mode provides a more flexible way of registering a schema, but requires advanced knowledge of the structure it must follow."}),"\n",(0,a.jsx)(t.p,{children:"It can also be used to get a plain text description of the schema that can be copied and saved to local files."}),"\n",(0,a.jsx)(t.p,{children:"The scheme must be a valid schema to be able to 'save' it."}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsxs)(t.p,{children:["Next step should be setting up the other piece of the communication, the device. This ",(0,a.jsx)("a",{href:"./How to publish device data",target:"_self",children:"other"}),"\nhow-to guide talks about it."]}),"\n",(0,a.jsx)(t.p,{children:"\u200d"})]})}function l(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>r});var a=i(6540);const n={},s=a.createContext(n);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);